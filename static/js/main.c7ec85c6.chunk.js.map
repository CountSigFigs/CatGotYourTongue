{"version":3,"sources":["Components/title.js","Components/UserInputForm.js","Components/DisplayResults.js","Components/main.js","App.js","serviceWorker.js","index.js"],"names":["styles","title","fontSize","fontWight","fontFamily","color","tag","Title","className","style","UserInputForm","props","state","word","typeSearch","handleWordChange","bind","handleSyn","handleAyn","handleSubmit","event","this","setState","target","value","e","preventDefault","handleFormInput","Form","FormGroup","Label","for","formLabel","Input","type","name","id","placeholder","onChange","role","aria-label","Button","formButton","onClick","submitButton","Component","float","fontWeight","backgroundColor","borderColor","border","Results","wordList","error","isLoaded","prevProps","wordToSearch","fetch","cache","then","res","json","result","trimmedList","slice","console","log","readyToFind","message","length","wordSearch","list","map","item","key","Main","containerStyle","borderRadius","height","width","opacity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c7ec85c6.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nfunction Title () {\n    return (\n            <div className='row'>\n                <div className='col mx-auto mt-3 text-center'>\n                    <span style={styles.title}>Cat Got Your Tongue?</span>\n                    <br />\n                    <p style={styles.tag}><i>Let me help you find synonyms and antonyms</i></p>\n                </div>\n            </div>\n    )\n}\n\nconst styles={\n    title:{\n        fontSize:42,\n        fontWight:'bold',\n        fontFamily:'Pangolin',\n        color:'#77AA77'\n    },\n    tag:{\n        fontFamily:'Pangolin'\n    }\n}\nexport default Title;","import React, {Component} from 'react';\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap';\n\nclass UserInputForm extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            word:'',\n            typeSearch:''\n        }\n\n        this.handleWordChange = this.handleWordChange.bind(this);\n        this.handleSyn = this.handleSyn.bind(this);\n        this.handleAyn = this.handleAyn.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    handleWordChange(event){\n        this.setState({word: event.target.value});\n    }\n\n    handleSyn(){\n        this.setState({typeSearch: 'syn'})\n    }\n\n    handleAyn(){\n        this.setState({typeSearch: 'ant'})\n    }\n\n    handleSubmit(e){\n        e.preventDefault()\n        this.props.handleFormInput(this.state.word,this.state.typeSearch)\n        this.setState({\n            typeSearch: ''\n        })\n    }\n\n    render (){\n        return(\n            <div className='row'>\n                <div className='col-9 col-md-7 mx-auto text-center'>\n                    <Form>\n                        <FormGroup>\n                            <Label for='userWord' style={styles.formLabel}>\n                                Enter Your Word\n                            </Label>\n                            <Input \n                                type='text'\n                                name='userWord'\n                                id='userWord'\n                                placeholder='hungry'\n                                value={this.state.word}\n                                onChange={this.handleWordChange}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                                <Button style={styles.formButton} type=\"button\" className=\"btn\"  onClick={this.handleSyn} id='toggleButton'>Synonyms</Button>\n                                <Button style={styles.formButton} type=\"button\" className=\"btn\"  onClick={this.handleAyn} id='toggleButton'>Antonyms</Button>\n                            </div>\n                        </FormGroup>\n                        <Button style={styles.submitButton} type='submit' value='submit' onClick={this.handleSubmit} id='submitButton'>Search</Button>\n                    </Form>\n                </div>\n            </div>\n        )\n    }\n}\nconst styles={\n    formLabel:{\n        float:'left',\n        fontFamily:'Pangolin',\n        fontWeight:'bold',\n        color:'#77AA77'\n    },\n    formButton:{\n        backgroundColor:'#55AA56',\n        borderColor:'black'\n    },\n    submitButton:{\n        backgroundColor:'#55AA56',\n        border:'none'\n    }\n}\n\nexport default UserInputForm;\n\n","import React, { Component } from 'react';\n\nclass Results extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            wordList:[],\n            error:null,\n            isLoaded:false\n        }\n    }\n    componentDidUpdate(prevProps) {\n\n        //prevents infinite loop\n        if (this.props.word !== prevProps.word || this.props.typeSearch !== prevProps.typeSearch){\n        \n        let baseUrl = 'https://api.datamuse.com/words';\n        let wordToSearch = this.props.word;\n        let type;\n        //determines what type of search to perform\n        if (this.props.typeSearch === 'syn') {\n            type = '?rel_syn='\n        }\n        if (this.props.typeSearch === 'ant') {\n            type = '?rel_ant='\n        }\n        let query = baseUrl + type + wordToSearch;\n        fetch(query,{cache: 'no-cache'})\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    //top ten results\n                    let trimmedList = result.slice(0,10)\n                    console.log(trimmedList)\n                    this.setState({\n                        isLoaded: true,\n                        wordList: trimmedList,\n                        error:null\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n        }\n        return;\n    }\n\n    render() {\n        if (this.props.readyToFind) {\n            const { error, isLoaded, wordList } = this.state;\n            if (!this.props.word || !this.props.typeSearch){\n                return <div className='text-center mt-2' style={styles.error}><p>Uh oh something went wrong. Make sure you entered a word and selected a button</p></div>\n            } else if (error) {\n                return <div className='text-center mt-2' style={styles.error}>Error: {error.message}</div>\n            } else if (!isLoaded) {\n                return <div className='text-center mt-2' style={styles.list}>Loading...</div>;\n            } else if (this.state.wordList.length < 1){\n                return <div className='text-center mt-2' style={styles.error}>No words were found. Try another word.</div>\n            } else {\n                let wordSearch = this.props.typeSearch === 'syn' ? 'Synonyms' : 'Antonyms'\n                return (\n                    <div className='col-9 col-md-6 mx-auto text-center mt-3' style={styles.list}>\n                        <p> {wordSearch} for: {this.props.word}</p>\n                        <ol>\n                            {wordList.map(item => (\n                                <li key={item.word}>\n                                    {item.word}\n                                </li>\n                            ))}\n                        </ol>\n                    </div>\n                )\n            }\n        }\n        else {\n            return <div></div>\n        }\n    }\n}\n\nconst styles={\n    list:{\n        fontSize:15,\n        fontFamily:'Pangolin'\n        },\n    error:{\n        fontSize:15,\n        fontFamily:'Pangolin',\n        color:'red'\n    }\n};\n\nexport default Results;\n","import React, { Component } from 'react';\nimport Title from './title';\nimport UserInputForm from './UserInputForm';\nimport Results from './DisplayResults'\n\nclass Main extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            word: '',\n            typeSearch: '',\n            readyToFind: false,\n        }\n        this.handleFormInput = this.handleFormInput.bind(this);\n    }\n\n    handleFormInput(word, typeSearch) {\n        this.setState({\n            word: word,\n            typeSearch: typeSearch,\n            readyToFind: true\n        })\n    }\n\n    render() {\n\n        return (\n            <div className='container' style={containerStyle}>\n                <Title />\n                <UserInputForm\n                    handleFormInput={this.handleFormInput}\n                />\n                <Results\n                    word={this.state.word}\n                    readyToFind={this.state.readyToFind}\n                    typeSearch={this.state.typeSearch}\n                />\n            </div>\n        )\n    }\n}\nconst containerStyle={\n    backgroundColor:'whitesmoke',\n    borderRadius:5,\n    height: 595,\n    width:450,\n    opacity: 0.9,\n    color: '#010100' \n   }\nexport default Main;\n\n","import React from 'react';\nimport './App.css';\nimport Main from './Components/main';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}